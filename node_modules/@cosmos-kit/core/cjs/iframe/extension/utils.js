"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashObject = exports.sendAndListenOnce = exports.listenOnce = void 0;
const crypto_1 = require("@cosmjs/crypto");
const encoding_1 = require("@cosmjs/encoding");
const uuid_1 = require("uuid");
// Listen for a message and remove the listener if the callback returns true or
// if it throws an error. Returns a function that removes the listener.
const listenOnce = (callback) => {
    const listener = async ({ data }) => {
        let remove;
        try {
            remove = await callback(data);
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.error(error);
            remove = true;
        }
        if (remove) {
            removeListener();
        }
    };
    const removeListener = () => window.removeEventListener('message', listener);
    // Add listener.
    window.addEventListener('message', listener);
    // Return function that removes the listener.
    return removeListener;
};
exports.listenOnce = listenOnce;
// Send message to parent and listen for a response. Returns a promise that
// resolves with the return value of the callback and rejects if the callback
// throws an error.
const sendAndListenOnce = (message, callback) => new Promise((resolve, reject) => {
    const id = (0, uuid_1.v4)();
    // Add one-time listener that waits for a response.
    const removeListener = (0, exports.listenOnce)(async (data) => {
        // Verify we are receiving a response for the correct message.
        if (data.id !== id) {
            return false;
        }
        try {
            resolve(await callback(data));
        }
        catch (err) {
            reject(err);
            return true;
        }
        return true;
    });
    try {
        // Send the message to our parent.
        window.top.postMessage({
            ...message,
            id,
        }, '*');
    }
    catch (err) {
        // If fails to send, remove the listener and reject.
        removeListener();
        reject(err);
    }
});
exports.sendAndListenOnce = sendAndListenOnce;
// Used for signing and verifying objects.
const hashObject = (object) => Buffer.from((0, crypto_1.sha256)((0, encoding_1.toUtf8)(JSON.stringify(object))));
exports.hashObject = hashObject;
//# sourceMappingURL=utils.js.map