import { StdSignature } from '@cosmjs/amino';
import { SignType, SimpleAccount, WalletAccount, WalletClient } from '../../types';
import { IframeWallet } from './main-wallet';
import { IframeAminoSigner, IframeDirectSigner } from './signers';
export declare class IframeClient implements WalletClient {
    private wallet;
    constructor(wallet: IframeWallet);
    getSimpleAccount(...params: any[]): Promise<SimpleAccount>;
    connect(...params: any[]): Promise<void>;
    enable(...params: any[]): Promise<void>;
    suggestToken(...params: any[]): Promise<void>;
    addChain(...params: any[]): Promise<void>;
    getAccount(...params: any[]): Promise<WalletAccount>;
    getOfflineSigner(chainId: string, preferredSignType?: SignType): IframeDirectSigner | IframeAminoSigner;
    getOfflineSignerAmino(chainId: string): IframeAminoSigner;
    getOfflineSignerDirect(chainId: string): IframeDirectSigner;
    sign(...params: any[]): Promise<any>;
    signAmino(...params: any[]): Promise<any>;
    signDirect(...params: any[]): Promise<any>;
    signArbitrary(...params: any[]): Promise<StdSignature>;
    getEnigmaPubKey(...params: any[]): Promise<any>;
    getEnigmaTxEncryptionKey(...params: any[]): Promise<any>;
    enigmaEncrypt(...params: any[]): Promise<any>;
    enigmaDecrypt(...params: any[]): Promise<any>;
    sendTx(...params: any[]): Promise<any>;
}
